# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}:

{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  # Use the systemd-boot EFI boot loader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  boot.initrd.availableKernelModules = [
    "xhci_pci"
    "thunderbolt"
    "nvme"
  ];
  boot.initrd.kernelModules = [ "dm-snapshot" ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  # Enable LUKS
  boot.initrd.luks.devices = {
    "nixos" = {
      device = "/dev/disk/by-uuid/fb793780-923f-4f0d-bb9b-cead23745d39";
      preLVM = true;
    };
  };

  # Use systemd-boot
  boot.loader.systemd-boot = {
    enable = true;
    configurationLimit = 10; # Limit the number of configurations kept
    consoleMode = "auto";
    editor = false; # Disable the editor for security
  };

  boot.loader.efi.canTouchEfiVariables = true;

  # Customize the boot entry
  boot.loader.grub.extraEntries = ''
    menuentry "NixOS" {
      loader /EFI/nixos/nixos-generation-X-filename.efi
    }
  '';

  # Optional: Set a custom boot menu timeout (in seconds)
  boot.loader.timeout = 5;

  fileSystems = {
    "/" = {
      device = "/dev/disk/by-uuid/04f9ecc2-bb20-415f-aff5-c54285523fd3";
      fsType = "ext4";
    };
    "/boot" = {
      device = "/dev/disk/by-partuuid/05399427-3ed0-4da7-bd08-740ddb6ce486";
      fsType = "vfat";
    };
    "/home/kylepzak" = {
      device = "/dev/mapper/data-home_kpzak";
      fsType = "ext4";
    };
    "/extpart" = {
      device = "/dev/mapper/data-extpart";
      fsType = "ext4";
    };
    "/backups" = {
      device = "/dev/mapper/data-backups";
      fsType = "ext4";
    };
  };

  swapDevices = [
    { device = "/dev/disk/by-uuid/b2530dee-4381-4a0f-a063-4871e2203999"; }
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.docker0.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp0s31f6.useDHCP = lib.mkDefault true;
  # networking.interfaces.lxcbr0.useDHCP = lib.mkDefault true;
  # networking.interfaces.mgmnt.useDHCP = lib.mkDefault true;
  # networking.interfaces.tailscale0.useDHCP = lib.mkDefault true;
  # networking.interfaces.vetha955db9.useDHCP = lib.mkDefault true;
  # networking.interfaces.virbr0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp0s20f3.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
